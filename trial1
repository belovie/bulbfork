<!DOCTYPE html>
<html lang="en">
<head>
  <title>Tuggable Light Bulb</title>


  <style>
    #bulb {
      display: inline-block;
      position: relative;
      width: 100px;
      height: 180px;
      margin: 50px;
      cursor: pointer;
    }
    #bulb > span {
      display: block;
      position: absolute;
      bottom: -45px;
      left: -30px;
      width: 210px;
      height: 100px;
      border-radius: 50%;
      background: linear-gradient(0deg, #fff, #D7E0E9);
      box-shadow: 
        inset -5px -5px 5px rgba(255,255,255,0.6),
        inset 5px 5px 5px rgba(0,0,0,0.2),
        inset -2px -2px 2px rgba(255,255,255,0.5),
        inset 2px 2px 2px rgba(0,0,0,0.1),
        5px 5px 15px rgba(0,0,0,0.3);
      transition: transform 0.2s, box-shadow 0.2s;
      transform: rotate(-30deg);
    }
    #bulb:active > span {
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.5), 0 0 10px rgba(0, 0, 0, 0.2), inset 0px 0px 20px rgba(255, 255, 255, 0.4), inset 0px 0px 30px rgba(255, 255, 255, 0.2);
      transform: rotate(-30deg);
    }
    .off {
      box-shadow: 
        inset -5px -5px 5px rgba(255,255,255,0.6),
        inset 5px 5px 5px rgba(0,0,0,0.2),
        inset -2px -2px 2px rgba(255,255,255,0.5),
        inset 2px 2px 2px rgba(0,0,0,0.1),
        5px 5px 15px rgba(0,0,0,0.3);
      background: linear-gradient(0deg, #fff, #D7E0E9);
    }
    .yellow {
      box-shadow: 
        inset -5px -5px 5px rgba(255,255,255,0.4),
        inset 5px 5px 5px rgba(0,0,0,0.1),
        5px 5px 15px rgba(0,0,0,0.2);
      background: linear-gradient(0deg, #ffeb9c, #ffd43b);
    }
    .red {
      box-shadow: 
        inset -5px -5px 5px rgba(255,204,204,0.4),
        inset 5px 5px 5px rgba(153,0,0,0.2),
        5px 5px 15px rgba(153,0,0,0.3);
      background: linear-gradient(0deg, #ff9c9c, #ff3b3b);
   


  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.min.js"></script>
</head>
<body>
  <div id="bulb-container">
    <div id="bulb">
      <span></span>
    </div>
    <div id="string-container">
      <div id="string"></div>
    </div>
  </div>
  <script>
    // Define the colors and the current color index
    const colors = ['#000', '#ff0', '#f00', '#ff69b4', '#ffa500', '#0f0', '#00f', '#800080'];
    let currentColorIndex = 0;
    
    function setup() {
      createCanvas(0, 0);
      const bulbContainer = document.querySelector('#bulb-container');
      let startX, startY, dist, elapsedTime, swipeDirection = null;
    
      function onTouchStart(e) {
        e.preventDefault();
        if (e.touches.length === 1) {
          startX = e.touches[0].pageX;
          startY = e.touches[0].pageY;
          swipeDirection = null;
          elapsedTime = new Date().getTime();
        }
      }
    
      function onTouchMove(e) {
        e.preventDefault();
        if (e.touches.length === 1) {
          const touch = e.touches[0];
          const deltaX = touch.pageX - startX;
          const deltaY = touch.pageY - startY;
          if (!swipeDirection) {
            swipeDirection = Math.abs(deltaX) > Math.abs(deltaY) ? 'horizontal' : 'vertical';
          }
          if (swipeDirection === 'vertical') {
            dist = touch.pageY - startY;
            const string = document.querySelector('#string');
            string.style.transform = `translateY(${dist}px)`;
            
            
            
          (document.querySelector('#bulb > span'), 'on');
            // Switch the color every other toggle
            if (dist % 50 === 0) {
              currentColorIndex = (currentColorIndex + 1) % colors.length;
              const color = colors[currentColorIndex];
              document.querySelector('#bulb > span').style.background = color;
            }
          }
        }
      }
    
      function onTouchEnd(e) {
        e.preventDefault();
        const elapsedTimeSeconds = (new Date().getTime() - elapsedTime) / 1000;
        const velocity = dist / elapsedTimeSeconds;
        if (velocity > 150 && swipeDirection === 'vertical') {
          // fast swipe
        } else if (swipeDirection === 'vertical') {
          // slow swipe
          const string = document.querySelector('#string');
          string.style.transition = 'transform 0.2s ease-in-out';
          string.style.transform = `translateY(0px)`;
          setTimeout(() => {
            string.style.transition = '';
          }, 200);
        }
        startX = startY = dist = elapsedTime = swipeDirection = null;
      }
    
 // Toggle classes to switch between color states
function toggleClass(el, className) {
  if (el.classList) {
    el.classList.toggle(className);
  } else {
    var classes = el.className.split(' ');
    var existingIndex = classes.indexOf(className);

    if (existingIndex >= 0)
      classes.splice(existingIndex, 1);
    else
      classes.push(className);

    el.className = classes.join(' ');
  }
}


// Set up touch and mouse event listeners
var bulbContainer = document.getElementById('bulb');
var startX, startY, dist, elapsedTime, swipeDirection;

function onTouchStart(e) {
  e.preventDefault();
  startX = e.changedTouches[0].pageX;
  startY = e.changedTouches[0].pageY;
  elapsedTime = new Date().getTime();
}

function onTouchMove(e) {
  e.preventDefault();
  var touch = e.changedTouches[0];
  var swipeLength = Math.round(Math.sqrt(Math.pow(touch.pageX - startX, 2) + Math.pow(touch.pageY - startY, 2)));
  if (swipeLength >= 50) {
    dist = touch.pageX - startX;
    swipeDirection = dist < 0 ? 'left' : 'right';
  }
}

function onTouchEnd(e) {
  e.preventDefault();
  var elapsedTimeDelta = new Date().getTime() - elapsedTime;
  if (elapsedTimeDelta <= 500 && dist >= 50) {
    handleToggle();
    dist = null;
  }
}

bulbContainer.addEventListener('mousedown', onTouchStart);
bulbContainer.addEventListener('mousemove', onTouchMove);
bulbContainer.addEventListener('mouseup', onTouchEnd);
bulbContainer.addEventListener('touchstart', onTouchStart);
bulbContainer.addEventListener('touchmove', onTouchMove);
bulbContainer.addEventListener('touchend', onTouchEnd);


      // Initialize colors
      var colors = ['yellow', 'red', 'pink', 'orange', 'green', 'blue', 'purple'];
      var currentColorIndex = 0;

      // Tug event listener
      bulbContainer.addEventListener('mousedown', onTouchStart);
      bulbContainer.addEventListener('mousemove', onTouchMove);
      bulbContainer.addEventListener('mouseup', onTouchEnd);
      bulbContainer.addEventListener('touchstart', onTouchStart);
      bulbContainer.addEventListener('touchmove', onTouchMove);
      bulbContainer.addEventListener('touchend', onTouchEnd);

      // Toggle classes to switch between color states
      function toggleClass(el, className) {
        if (el.classList) {
          el.classList.toggle(className);
        } else {
          var classes = el.className.split(' ');
          var existingIndex = classes.indexOf(className);

          if (existingIndex >= 0) {
            classes.splice(existingIndex, 1);
          } else {
            classes.push(className);
          }

          el.className = classes.join(' ');
        }
      }

      // Change color of light bulb on tug
      function changeBulbColor() {
        toggleClass(bulb, 'off');
        toggleClass(bulb, colorClasses[colorIndex]);
        colorIndex = (colorIndex + 1) % colorClasses.length;
      }

      // Handle touch events for tuggable string
      function onTouchStart(e) {
        startX = e.clientX || e.touches[0].clientX;
        startY = e.clientY || e.touches[0].clientY;
        startTime = new Date().getTime();
        e.preventDefault();
      }

      function onTouchMove(e) {
        e.preventDefault();
      }

      function onTouchEnd(e) {
        distX = (e.clientX || e.changedTouches[0].clientX) - startX;
        distY = (e.clientY || e.changedTouches[0].clientY) - startY;
        elapsedTime = new Date().getTime() - startTime;

        if (Math.abs(distX) >= minDist && Math.abs(distY) <= maxDist && elapsedTime <= maxTime) {
          changeBulbColor();
        }
      }

      // Add touch event listeners to tuggable string
      tuggableString.addEventListener('touchstart', onTouchStart);
      tuggableString.addEventListener('touchmove', onTouchMove);
      tuggableString.addEventListener('touchend', onTouchEnd);
      tuggableString.addEventListener('
      ', onTouchStart);
      tuggableString.addEventListener('mousemove', onTouchMove);
      tuggableString.
      Listener('mouseup', onTouchEnd);
    })();
        var classes = el.className.split(' ');
          var existingIndex = classes.indexOf(className);

          if (existingIndex >= 0)
            classes.splice(existingIndex, 1);
          else
            classes.push(className);

          el.className = classes.join(' ');
        }
      }

      // Add touch event listeners to the container
      bulbContainer.addEventListener('touchstart', onTouchStart);
      bulbContainer.addEventListener('touchmove', onTouchMove);
      bulbContainer.addEventListener('touchend', onTouchEnd);

      // Add mouse event listeners to the container
      bulbContainer.addEventListener('mousedown', onTouchStart);
      bulbContainer.addEventListener('mousemove', onTouchMove);
      bulbContainer.addEventListener('mouseup', onTouchEnd);
    })();
    
    bulb.addEventListener('touchstart', onTouchStart);
bulb.addEventListener('touchmove', onTouchMove);
bulb.addEventListener('touchend', onTouchEnd);

function onMouseDown() {
  toggleClass(bulb, 'on');
}

function onTouchStart(e) {
  if (e.touches.length === 1) {
    startX = e.touches[0].clientX;
    startY = e.touches[0].clientY;
    elapsedTime = 0;
    lastPosX = startX;
    lastPosY = startY;
    swipeDirection = '';
    intervalID = setInterval(trackTime, 100);
  }
}

function onTouchMove(e) {
  e.preventDefault();
  elapsedTime += 100;
  var currentPosX = e.touches[0].clientX;
  var currentPosY = e.touches[0].clientY;
  var distanceX = currentPosX - startX;
  var distanceY = currentPosY - startY;
  var absDistanceX = Math.abs(distanceX);
  var absDistanceY = Math.abs(distanceY);
  var swipeThreshold = 20;
  var swipeTimeThreshold = 1000;
  if (elapsedTime < swipeTimeThreshold && absDistanceX > swipeThreshold && absDistanceX > absDistanceY) {
    swipeDirection = (distanceX < 0) ? 'left' : 'right';
  } else if (elapsedTime < swipeTimeThreshold && absDistanceY > swipeThreshold && absDistanceY > absDistanceX) {
    swipeDirection = (distanceY < 0) ? 'up' : 'down';
  }
  lastPosX = currentPosX;
  lastPosY = currentPosY;
}

function onTouchEnd(e) {
  clearInterval(intervalID);
  dist = lastPosX - startX;
  var elapsedTimeSeconds = elapsedTime / 1000;
  var velocity = dist / elapsedTimeSeconds;
  if (Math.abs(dist) >= threshold || (elapsedTimeSeconds < timeThreshold && Math.abs(velocity) > velocityThreshold)) {
    if (swipeDirection === 'left') {
      colorIndex = (colorIndex > 0) ? colorIndex - 1 : colors.length - 1;
    } else if (swipeDirection === 'right') {
      colorIndex = (colorIndex < colors.length - 1) ? colorIndex + 1 : 0;
    }
  }
  toggleClass(bulb, 'on');
  bulb.style.background = colors[colorIndex];
  startX = startY = dist = elapsedTime = swipeDirection = null;
}

// Toggle classes to switch between color states
function toggleClass(el, className) {
  if (el.classList) {
    el.classList.toggle(className);
  } else {
    var classes = el.className.split(' ');
    var existingIndex = classes.indexOf(className);

    if (existingIndex >= 0) {
      classes.splice(existingIndex, 1);
    } else {
      classes.push(className);
    }
    el.className = classes.join(' ');
  }
}



  </script>
</body>
</html>
